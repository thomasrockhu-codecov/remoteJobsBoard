// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen
{% if catalogs %}
{% set enumName %}{{param.enumName|default:"Asset"}}{% endset %}
import UIKit

// swiftlint:disable let_var_whitespace superfluous_disable_command
{% macro enumBlock assets %}
  {% call casesBlock assets %}
{% endmacro %}
{% macro casesBlock assets %}
  {% for asset in assets %}
  {% if asset.type == "image" %}
  static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: UIImage { Asset(name: "{{asset.value}}").image }
  {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
  enum {{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call casesBlock asset.items %}{% endfilter %}
  }
  {% elif asset.items %}
  {% call casesBlock asset.items %}
  {% endif %}
  {% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
  {% for asset in assets %}
  {% if asset.type == filter %}
  {{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
  {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
  {% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
  {% call allValuesBlock asset.items filter prefix2 %}
  {% elif asset.items %}
  {% call allValuesBlock asset.items filter prefix %}
  {% endif %}
  {% endfor %}
{% endmacro %}
enum {{enumName}} {

  {% if catalogs.count > 1 %}
  {% for catalog in catalogs %}
  enum {{catalog.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:1 %}{% call enumBlock catalog.assets %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call enumBlock catalogs.first.assets %}
  {% endif %}

  static var onError: ((Error) -> Void)?

}
// swiftlint:enable let_var_whitespace superfluous_disable_command

// MARK: - Image Asset

private extension {{enumName}} {

  struct Asset {

    let name: String

    var image: UIImage {
      guard let result = UIImage(named: name) else {
        Image.onError?(InitError.imageInit(name: name))
        return UIImage()
      }
      return result
    }

  }

}
{% else %}
// No assets found
{% endif %}

// MARK: - InitError

extension Image {

  enum InitError: Error {

    case imageInit(name: String)
    case sfSymbolInit(name: String)

  }

}
